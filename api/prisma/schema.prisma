generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource mysql {
  provider     = "mysql"
  url          = env("MYSQL_DATABASE_URI")
  relationMode = "prisma"
}

model DeviceToken {
  id             Int      @id @default(autoincrement())
  fcmDeviceToken String   @map("fcm_device_token")
  userId         Int      @map("user_id")
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("device_tokens")
}

model Ingredient {
  id             Int              @id @default(autoincrement())
  description    String
  name           String           @unique()
  thumbnail      String
  icon           String
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  Useringredient UserIngredient[]

  @@map("ingredients")
}

model Noti {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("notis")
}

model RecipeBookmark {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  recipeId  Int      @map("recipeId")
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([recipeId])
  @@map("recipe_bookmarks")
}

model Recipe {
  id             Int              @id @default(autoincrement())
  mongoId        String?          @unique
  name           String
  description    String
  ownerId        Int?
  owner          User?            @relation(fields: [ownerId], references: [id])
  thumbnail      String
  originUrl      String
  viewCount      Int              @default(0)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  recipeBookmark RecipeBookmark[]
  recipeViewLog  RecipeViewLog[]

  @@index([ownerId])
  @@map("recipes")
}

model RecipeViewLog {
  id        Int      @id @default(autoincrement())
  recipeId  Int      @map("recipe_id")
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  userId    Int?     @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])
  userIp    String   @map("user_ip")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([createdAt])
  @@index([recipeId])
  @@index([userId])
  @@map("recipe_view_logs")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique() @map("session_token")
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@index([createdAt])
  @@index([userId])
  @@map("sessions")
}

model UserIngredient {
  id                   Int         @id @default(autoincrement())
  count                Int
  daysBeforeExpiration Int         @map("days_before_expiration")
  foodType             FoodType    @default(ETC) @map("food_type")
  icon                 String
  name                 String
  storeMethod          StoreMethod @default(REFRIGERATE) @map("store_method")
  ingredientId         Int         @map("ingredient_id")
  ingredient           Ingredient  @relation(fields: [ingredientId], references: [id])
  userId               Int         @map("user_id")
  user                 User        @relation(fields: [userId], references: [id])
  createdAt            DateTime    @default(now()) @map("created_at")
  updatedAt            DateTime    @updatedAt @map("updated_at")

  @@index([ingredientId])
  @@index([userId])
  @@map("user_ingredients")
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique()
  email           String           @unique()
  introduction    String           @default("")
  diet            Diet             @default(NORMAL)
  thumbnail       String           @default("")
  deviceTokens    DeviceToken[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  notis           Noti[]
  recipeBookmarks RecipeBookmark[]
  recipeViewLogs  RecipeViewLog[]
  sessions        Session[]
  userIngredients UserIngredient[]
  recipes         Recipe[]

  @@map("users")
}

enum StoreMethod {
  FREEZE
  REFRIGERATE
  ROOM_TEMPERATURE
}

enum FoodType {
  PROTEIN
  VEGETABLE
  CARBOHYDRATE
  FUNCTIONAL_FOOD
  ETC
}

enum Diet {
  NORMAL
  DIET
  VEGAN
  KETO
  WORKOUT
}
